/* The following code was generated by JFlex 1.4.3 on 1/18/17 2:38 PM */

//java -jar JFlex.jar D:\Dropbox\ubuntu_vms_share\retroscope-lib\rql-server\src\main\java\retroscope\rql\rql.flex
package retroscope.rql;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1/18/17 2:38 PM from the specification file
 * <tt>D:/Dropbox/ubuntu_vms_share/retroscope-lib/rql-server/src/main/java/retroscope/rql/rql.flex</tt>
 */
class Scanner implements mTokens {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\3\1\2\1\0\1\3\1\1\16\10\4\0\1\3\1\54"+
    "\1\42\1\6\1\7\1\44\1\55\1\0\1\46\1\47\1\5\1\43"+
    "\1\64\1\41\1\37\1\4\1\11\11\12\1\62\1\63\1\60\1\57"+
    "\1\61\2\0\1\17\1\33\1\23\1\34\1\13\1\25\1\7\1\32"+
    "\1\20\2\7\1\16\1\30\1\21\1\27\1\15\1\7\1\26\1\22"+
    "\1\24\1\36\1\7\1\31\1\14\2\7\1\52\1\0\1\53\1\45"+
    "\1\35\1\0\4\7\1\40\25\7\1\50\1\56\1\51\1\0\41\10"+
    "\2\0\4\7\4\0\1\7\2\0\1\10\7\0\1\7\4\0\1\7"+
    "\5\0\27\7\1\0\37\7\1\0\u01ca\7\4\0\14\7\16\0\5\7"+
    "\7\0\1\7\1\0\1\7\21\0\160\10\5\7\1\0\2\7\2\0"+
    "\4\7\10\0\1\7\1\0\3\7\1\0\1\7\1\0\24\7\1\0"+
    "\123\7\1\0\213\7\1\0\5\10\2\0\236\7\11\0\46\7\2\0"+
    "\1\7\7\0\47\7\7\0\1\7\1\0\55\10\1\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\1\10\10\0\33\7\5\0\3\7\15\0"+
    "\5\10\6\0\1\7\4\0\13\10\5\0\53\7\37\10\4\0\2\7"+
    "\1\10\143\7\1\0\1\7\10\10\1\0\6\10\2\7\2\10\1\0"+
    "\4\10\2\7\12\10\3\7\2\0\1\7\17\0\1\10\1\7\1\10"+
    "\36\7\33\10\2\0\131\7\13\10\1\7\16\0\12\10\41\7\11\10"+
    "\2\7\4\0\1\7\5\0\26\7\4\10\1\7\11\10\1\7\3\10"+
    "\1\7\5\10\22\0\31\7\3\10\104\0\1\7\1\0\13\7\67\0"+
    "\33\10\1\0\4\10\66\7\3\10\1\7\22\10\1\7\7\10\12\7"+
    "\2\10\2\0\12\10\1\0\7\7\1\0\7\7\1\0\3\10\1\0"+
    "\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0\1\7\3\0"+
    "\4\7\2\0\1\10\1\7\7\10\2\0\2\10\2\0\3\10\1\7"+
    "\10\0\1\10\4\0\2\7\1\0\3\7\2\10\2\0\12\10\4\7"+
    "\7\0\1\7\5\0\3\10\1\0\6\7\4\0\2\7\2\0\26\7"+
    "\1\0\7\7\1\0\2\7\1\0\2\7\1\0\2\7\2\0\1\10"+
    "\1\0\5\10\4\0\2\10\2\0\3\10\3\0\1\10\7\0\4\7"+
    "\1\0\1\7\7\0\14\10\3\7\1\10\13\0\3\10\1\0\11\7"+
    "\1\0\3\7\1\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7"+
    "\2\0\1\10\1\7\10\10\1\0\3\10\1\0\3\10\2\0\1\7"+
    "\17\0\2\7\2\10\2\0\12\10\1\0\1\7\17\0\3\10\1\0"+
    "\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0"+
    "\5\7\2\0\1\10\1\7\7\10\2\0\2\10\2\0\3\10\10\0"+
    "\2\10\4\0\2\7\1\0\3\7\2\10\2\0\12\10\1\0\1\7"+
    "\20\0\1\10\1\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0"+
    "\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0"+
    "\14\7\4\0\5\10\3\0\3\10\1\0\4\10\2\0\1\7\6\0"+
    "\1\10\16\0\12\10\11\0\1\7\7\0\3\10\1\0\10\7\1\0"+
    "\3\7\1\0\27\7\1\0\12\7\1\0\5\7\3\0\1\7\7\10"+
    "\1\0\3\10\1\0\4\10\7\0\2\10\1\0\2\7\6\0\2\7"+
    "\2\10\2\0\12\10\22\0\2\10\1\0\10\7\1\0\3\7\1\0"+
    "\27\7\1\0\12\7\1\0\5\7\2\0\1\10\1\7\7\10\1\0"+
    "\3\10\1\0\4\10\7\0\2\10\7\0\1\7\1\0\2\7\2\10"+
    "\2\0\12\10\1\0\2\7\17\0\2\10\1\0\10\7\1\0\3\7"+
    "\1\0\51\7\2\0\1\7\7\10\1\0\3\10\1\0\4\10\1\7"+
    "\10\0\1\10\10\0\2\7\2\10\2\0\12\10\12\0\6\7\2\0"+
    "\2\10\1\0\22\7\3\0\30\7\1\0\11\7\1\0\1\7\2\0"+
    "\7\7\3\0\1\10\4\0\6\10\1\0\1\10\1\0\10\10\22\0"+
    "\2\10\15\0\60\7\1\10\2\7\7\10\4\0\10\7\10\10\1\0"+
    "\12\10\47\0\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0"+
    "\1\7\6\0\4\7\1\0\7\7\1\0\3\7\1\0\1\7\1\0"+
    "\1\7\2\0\2\7\1\0\4\7\1\10\2\7\6\10\1\0\2\10"+
    "\1\7\2\0\5\7\1\0\1\7\1\0\6\10\2\0\12\10\2\0"+
    "\4\7\40\0\1\7\27\0\2\10\6\0\12\10\13\0\1\10\1\0"+
    "\1\10\1\0\1\10\4\0\2\10\10\7\1\0\44\7\4\0\24\10"+
    "\1\0\2\10\5\7\13\10\1\0\44\10\11\0\1\10\71\0\53\7"+
    "\24\10\1\7\12\10\6\0\6\7\4\10\4\7\3\10\1\7\3\10"+
    "\2\7\7\10\3\7\4\10\15\7\14\10\1\7\17\10\2\0\46\7"+
    "\1\0\1\7\5\0\1\7\2\0\53\7\1\0\u014d\7\1\0\4\7"+
    "\2\0\7\7\1\0\1\7\1\0\4\7\2\0\51\7\1\0\4\7"+
    "\2\0\41\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7"+
    "\2\0\17\7\1\0\71\7\1\0\4\7\2\0\103\7\2\0\3\10"+
    "\40\0\20\7\20\0\125\7\14\0\u026c\7\2\0\21\7\1\0\32\7"+
    "\5\0\113\7\3\0\3\7\17\0\15\7\1\0\4\7\3\10\13\0"+
    "\22\7\3\10\13\0\22\7\2\10\14\0\15\7\1\0\3\7\1\0"+
    "\2\10\14\0\64\7\40\10\3\0\1\7\3\0\2\7\1\10\2\0"+
    "\12\10\41\0\3\10\2\0\12\10\6\0\130\7\10\0\51\7\1\10"+
    "\1\7\5\0\106\7\12\0\35\7\3\0\14\10\4\0\14\10\12\0"+
    "\12\10\36\7\2\0\5\7\13\0\54\7\4\0\21\10\7\7\2\10"+
    "\6\0\12\10\46\0\27\7\5\10\4\0\65\7\12\10\1\0\35\10"+
    "\2\0\13\10\6\0\12\10\15\0\1\7\130\0\5\10\57\7\21\10"+
    "\7\7\4\0\12\10\21\0\11\10\14\0\3\10\36\7\15\10\2\7"+
    "\12\10\54\7\16\10\14\0\44\7\24\10\10\0\12\10\3\0\3\7"+
    "\12\10\44\7\122\0\3\10\1\0\25\10\4\7\1\10\4\7\3\10"+
    "\2\7\11\0\300\7\47\10\25\0\4\10\u0116\7\2\0\6\7\2\0"+
    "\46\7\2\0\6\7\2\0\10\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\37\7\2\0\65\7\1\0\7\7\1\0\1\7\3\0"+
    "\3\7\1\0\7\7\3\0\4\7\2\0\6\7\4\0\15\7\5\0"+
    "\3\7\1\0\7\7\16\0\5\10\32\0\5\10\20\0\2\7\23\0"+
    "\1\7\13\0\5\10\5\0\6\10\1\0\1\7\15\0\1\7\20\0"+
    "\15\7\3\0\33\7\25\0\15\10\4\0\1\10\3\0\14\10\21\0"+
    "\1\7\4\0\1\7\2\0\12\7\1\0\1\7\3\0\5\7\6\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\4\7\1\0\13\7\2\0"+
    "\4\7\5\0\5\7\4\0\1\7\21\0\51\7\u0a77\0\57\7\1\0"+
    "\57\7\1\0\205\7\6\0\4\7\3\10\2\7\14\0\46\7\1\0"+
    "\1\7\5\0\1\7\2\0\70\7\7\0\1\7\17\0\1\10\27\7"+
    "\11\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7"+
    "\1\0\7\7\1\0\7\7\1\0\7\7\1\0\40\10\57\0\1\7"+
    "\u01d5\0\3\7\31\0\11\7\6\10\1\0\5\7\2\0\5\7\4\0"+
    "\126\7\2\0\2\10\2\0\3\7\1\0\132\7\1\0\4\7\5\0"+
    "\51\7\3\0\136\7\21\0\33\7\65\0\20\7\u0200\0\u19b6\7\112\0"+
    "\u51cd\7\63\0\u048d\7\103\0\56\7\2\0\u010d\7\3\0\20\7\12\10"+
    "\2\7\24\0\57\7\1\10\4\0\12\10\1\0\31\7\7\0\1\10"+
    "\120\7\2\10\45\0\11\7\2\0\147\7\2\0\4\7\1\0\4\7"+
    "\14\0\13\7\115\0\12\7\1\10\3\7\1\10\4\7\1\10\27\7"+
    "\5\10\20\0\1\7\7\0\64\7\14\0\2\10\62\7\21\10\13\0"+
    "\12\10\6\0\22\10\6\7\3\0\1\7\4\0\12\10\34\7\10\10"+
    "\2\0\27\7\15\10\14\0\35\7\3\0\4\10\57\7\16\10\16\0"+
    "\1\7\12\10\46\0\51\7\16\10\11\0\3\7\1\10\10\7\2\10"+
    "\2\0\12\10\6\0\27\7\3\0\1\7\1\10\4\0\60\7\1\10"+
    "\1\7\3\10\2\7\2\10\5\7\2\10\1\7\1\10\1\7\30\0"+
    "\3\7\2\0\13\7\5\10\2\0\3\7\2\10\12\0\6\7\2\0"+
    "\6\7\2\0\6\7\11\0\7\7\1\0\7\7\221\0\43\7\10\10"+
    "\1\0\2\10\2\0\12\10\6\0\u2ba4\7\14\0\27\7\4\0\61\7"+
    "\u2104\0\u016e\7\2\0\152\7\46\0\7\7\14\0\5\7\5\0\1\7"+
    "\1\10\12\7\1\0\15\7\1\0\5\7\1\0\1\7\1\0\2\7"+
    "\1\0\2\7\1\0\154\7\41\0\u016b\7\22\0\100\7\2\0\66\7"+
    "\50\0\15\7\3\0\20\10\20\0\7\10\14\0\2\7\30\0\3\7"+
    "\31\0\1\7\6\0\5\7\1\0\207\7\2\0\1\10\4\0\1\7"+
    "\13\0\12\10\7\0\32\7\4\0\1\7\1\0\32\7\13\0\131\7"+
    "\3\0\6\7\2\0\6\7\2\0\6\7\2\0\3\7\3\0\2\7"+
    "\3\0\2\7\22\0\3\10\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\1\1\5\2\6"+
    "\13\5\1\7\1\10\1\1\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\1\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\2\0\1\32"+
    "\1\0\1\5\1\0\2\5\1\33\7\5\1\34\2\5"+
    "\1\35\1\36\2\5\1\32\1\37\1\40\1\41\1\36"+
    "\1\42\1\43\1\44\1\0\2\5\1\41\3\5\1\45"+
    "\10\5\1\0\6\5\1\46\1\47\1\5\1\50\1\51"+
    "\2\5\1\32\1\0\2\5\1\52\1\53\1\5\1\54"+
    "\1\55\4\5\1\56\1\5\1\57\1\60\1\5\1\61"+
    "\1\5\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\65\0\237\0\65\0\324\0\u0109"+
    "\0\u013e\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\65\0\u0424"+
    "\0\65\0\65\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\65\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\65"+
    "\0\65\0\65\0\u0597\0\324\0\u013e\0\u03ef\0\u05cc\0\u0424"+
    "\0\u0601\0\u0636\0\u0109\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f"+
    "\0\u0774\0\u07a9\0\u0109\0\u07de\0\u0813\0\u0109\0\u0109\0\u0848"+
    "\0\u087d\0\u08b2\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\65\0\u08e7\0\u091c\0\u0951\0\u0109\0\u0986\0\u09bb\0\u09f0"+
    "\0\u0109\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63"+
    "\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b"+
    "\0\u0109\0\u0109\0\u0d40\0\u0109\0\u0109\0\u0d75\0\u0daa\0\u0ddf"+
    "\0\u0ddf\0\u0e14\0\u0e49\0\u0109\0\u0109\0\u0e7e\0\u0109\0\u0109"+
    "\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0109\0\u0f87\0\u0109\0\u0109"+
    "\0\u0fbc\0\u0109\0\u0ff1\0\u0109";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\2\10\1\14\1\15\1\10\1\16"+
    "\1\17\1\20\1\21\1\22\1\10\1\23\1\10\1\24"+
    "\1\10\1\25\3\10\1\26\1\10\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\67\0\1\4\67\0\1\53\57\0\1\54\1\3"+
    "\1\4\62\54\7\0\30\10\1\0\1\10\35\0\2\55"+
    "\24\0\1\56\36\0\2\12\24\0\1\56\34\0\5\10"+
    "\1\57\22\10\1\0\1\10\33\0\30\10\1\0\1\10"+
    "\1\0\1\60\31\0\7\10\1\61\2\10\1\62\2\10"+
    "\1\63\1\64\11\10\1\0\1\10\33\0\20\10\1\65"+
    "\7\10\1\0\1\10\33\0\4\10\1\66\22\10\1\67"+
    "\1\0\1\10\33\0\20\10\1\70\7\10\1\0\1\10"+
    "\33\0\11\10\1\71\5\10\1\72\1\73\7\10\1\0"+
    "\1\10\33\0\10\10\1\74\6\10\1\75\10\10\1\0"+
    "\1\10\33\0\12\10\1\76\4\10\1\77\10\10\1\0"+
    "\1\10\33\0\23\10\1\100\4\10\1\0\1\10\33\0"+
    "\4\10\1\101\23\10\1\0\1\10\35\0\2\102\52\0"+
    "\42\60\1\103\22\60\57\0\1\104\62\0\1\105\65\0"+
    "\1\106\65\0\1\107\64\0\1\110\64\0\1\111\5\0"+
    "\5\53\1\112\57\53\7\0\6\10\1\113\21\10\1\0"+
    "\1\10\33\0\7\10\1\114\20\10\1\0\1\10\33\0"+
    "\25\10\1\115\2\10\1\0\1\10\33\0\15\10\1\116"+
    "\12\10\1\0\1\10\33\0\25\10\1\117\2\10\1\0"+
    "\1\10\33\0\7\10\1\120\20\10\1\0\1\10\33\0"+
    "\21\10\1\121\6\10\1\0\1\10\33\0\27\10\1\122"+
    "\1\0\1\10\33\0\21\10\1\123\6\10\1\0\1\10"+
    "\33\0\27\10\1\124\1\0\1\10\33\0\7\10\1\125"+
    "\20\10\1\0\1\10\33\0\20\10\1\126\7\10\1\0"+
    "\1\10\33\0\4\10\1\127\23\10\1\0\1\10\33\0"+
    "\15\10\1\130\1\131\11\10\1\0\1\10\35\0\2\102"+
    "\1\132\24\0\1\132\24\0\4\53\1\4\1\112\57\53"+
    "\7\0\7\10\1\133\20\10\1\0\1\10\33\0\26\10"+
    "\1\134\1\10\1\0\1\10\33\0\4\10\1\135\23\10"+
    "\1\0\1\10\33\0\4\10\1\136\23\10\1\0\1\10"+
    "\33\0\4\10\1\137\23\10\1\0\1\10\33\0\12\10"+
    "\1\140\15\10\1\0\1\10\33\0\4\10\1\141\23\10"+
    "\1\0\1\10\33\0\4\10\1\142\23\10\1\0\1\10"+
    "\33\0\13\10\1\143\14\10\1\0\1\10\33\0\21\10"+
    "\1\144\6\10\1\0\1\10\33\0\12\10\1\145\15\10"+
    "\1\0\1\10\33\0\22\10\1\146\5\10\1\0\1\10"+
    "\33\0\20\10\1\147\7\10\1\0\1\10\35\0\2\150"+
    "\26\0\1\151\1\0\1\151\30\0\10\10\1\152\17\10"+
    "\1\0\1\10\33\0\12\10\1\153\15\10\1\0\1\10"+
    "\33\0\17\10\1\154\10\10\1\0\1\10\33\0\13\10"+
    "\1\155\14\10\1\0\1\10\33\0\14\10\1\156\13\10"+
    "\1\0\1\10\33\0\15\10\1\157\12\10\1\0\1\10"+
    "\33\0\4\10\1\160\23\10\1\0\1\10\33\0\4\10"+
    "\1\161\23\10\1\0\1\10\33\0\17\10\1\162\10\10"+
    "\1\0\1\10\35\0\2\150\61\0\11\10\1\163\16\10"+
    "\1\0\1\10\33\0\20\10\1\164\7\10\1\0\1\10"+
    "\33\0\15\10\1\165\12\10\1\0\1\10\33\0\4\10"+
    "\1\166\23\10\1\0\1\10\33\0\4\10\1\167\23\10"+
    "\1\0\1\10\33\0\12\10\1\170\15\10\1\0\1\10"+
    "\33\0\25\10\1\171\2\10\1\0\1\10\33\0\12\10"+
    "\1\172\15\10\1\0\1\10\33\0\4\10\1\173\23\10"+
    "\1\0\1\10\33\0\13\10\1\174\14\10\1\0\1\10"+
    "\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4134];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\20\1\1\11"+
    "\1\1\11\11\6\1\3\11\2\0\1\1\1\0\1\1"+
    "\1\0\22\1\7\11\1\0\17\1\1\0\16\1\1\0"+
    "\23\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
int token;
Object semanticValue;
int line(){return yyline;}
int column(){return yycolumn;}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2250) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 25: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [96] { return token=\',\'; }");
          { return token=',';
          }
        case 51: break;
        case 20: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [89] { return token=\'=\'; }");
          { return token='=';
          }
        case 52: break;
        case 45: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [48] { return token=FALSE; }");
          { return token=FALSE;
          }
        case 53: break;
        case 44: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [57] { return token=COUNT; }");
          { return token=COUNT;
          }
        case 54: break;
        case 48: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [33] { return token=EXPLAIN; }");
          { return token=EXPLAIN;
          }
        case 55: break;
        case 5: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [65] { semanticValue=yytext();return token=IDENTIFIER; }");
          { semanticValue=yytext();return token=IDENTIFIER;
          }
        case 56: break;
        case 43: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [45] { return token=NODES; }");
          { return token=NODES;
          }
        case 57: break;
        case 9: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [68] { return token=\'+\'; }");
          { return token='+';
          }
        case 58: break;
        case 21: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [90] { return token=\'<\'; }");
          { return token='<';
          }
        case 59: break;
        case 11: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [73] { return token=\'^\'; }");
          { return token='^';
          }
        case 60: break;
        case 1: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [104] { throw new Error(\"unexpected\"+yytext()); }");
          { throw new Error("unexpected"+yytext());
          }
        case 61: break;
        case 4: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [71] { return token=\'*\'; }");
          { return token='*';
          }
        case 62: break;
        case 29: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [41] { return token=ON; }");
          { return token=ON;
          }
        case 63: break;
        case 24: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [95] { return token=\';\'; }");
          { return token=';';
          }
        case 64: break;
        case 33: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [81] { return token=AND; }");
          { return token=AND;
          }
        case 65: break;
        case 18: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [80] { return token=\'!\'; }");
          { return token='!';
          }
        case 66: break;
        case 31: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [63] { semanticValue=yytext(); return STRING_LITERAL; }");
          { semanticValue=yytext(); return STRING_LITERAL;
          }
        case 67: break;
        case 17: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [79] { return token=\']\'; }");
          { return token=']';
          }
        case 68: break;
        case 28: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [40] { return token=TO; }");
          { return token=TO;
          }
        case 69: break;
        case 13: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [75] { return token=\')\'; }");
          { return token=')';
          }
        case 70: break;
        case 23: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [94] { return token=\':\'; }");
          { return token=':';
          }
        case 71: break;
        case 32: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [85] { return token=NEQ; }");
          { return token=NEQ;
          }
        case 72: break;
        case 34: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [86] { return token=EQ; }");
          { return token=EQ;
          }
        case 73: break;
        case 50: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [46] { return token=ALL_NODES; }");
          { return token=ALL_NODES;
          }
        case 74: break;
        case 12: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [74] { return token=\'(\'; }");
          { return token='(';
          }
        case 75: break;
        case 36: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [88] { return token=GEQ; }");
          { return token=GEQ;
          }
        case 76: break;
        case 16: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [78] { return token=\'[\'; }");
          { return token='[';
          }
        case 77: break;
        case 35: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [87] { return token=LEQ; }");
          { return token=LEQ;
          }
        case 78: break;
        case 40: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [35] { return token=FROM; }");
          { return token=FROM;
          }
        case 79: break;
        case 15: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [77] { return token=\'}\'; }");
          { return token='}';
          }
        case 80: break;
        case 47: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [44] { return token=BEFORE; }");
          { return token=BEFORE;
          }
        case 81: break;
        case 3: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [72] { return token=\'/\'; }");
          { return token='/';
          }
        case 82: break;
        case 41: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [37] { return token=WHEN; }");
          { return token=WHEN;
          }
        case 83: break;
        case 39: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [47] { return token=TRUE; }");
          { return token=TRUE;
          }
        case 84: break;
        case 42: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [43] { return token=AFTER; }");
          { return token=AFTER;
          }
        case 85: break;
        case 19: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [92] { return token=\'|\'; }");
          { return token='|';
          }
        case 86: break;
        case 7: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [93] { return token=\'.\'; }");
          { return token='.';
          }
        case 87: break;
        case 46: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [34] { return token=SELECT; }");
          { return token=SELECT;
          }
        case 88: break;
        case 10: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [69] { return token=\'%\'; }");
          { return token='%';
          }
        case 89: break;
        case 14: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [76] { return token=\'{\'; }");
          { return token='{';
          }
        case 90: break;
        case 6: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [60] { semanticValue=Integer.parseInt(yytext());return token=INTEGER_LITERAL; }");
          { semanticValue=Integer.parseInt(yytext());return token=INTEGER_LITERAL;
          }
        case 91: break;
        case 8: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [70] { return token=\'-\'; }");
          { return token='-';
          }
        case 92: break;
        case 27: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [38] { return token=AT; }");
          { return token=AT;
          }
        case 93: break;
        case 37: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [56] { return token=SUM; }");
          { return token=SUM;
          }
        case 94: break;
        case 22: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [91] { return token=\'>\'; }");
          { return token='>';
          }
        case 95: break;
        case 26: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [61] { semanticValue=Double.parseDouble(yytext());return FLOAT_LITERAL; }");
          { semanticValue=Double.parseDouble(yytext());return FLOAT_LITERAL;
          }
        case 96: break;
        case 38: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [39] { return token=TIME; }");
          { return token=TIME;
          }
        case 97: break;
        case 30: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [53] { return token=OR; }");
          { return token=OR;
          }
        case 98: break;
        case 49: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [42] { return token=BETWEEN; }");
          { return token=BETWEEN;
          }
        case 99: break;
        case 2: 
          //System.out.println("match: --"+yytext()+"--");
          //System.out.println("action [102] {  }");
          { 
          }
        case 100: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                //System.out.println("match: <<EOF>>");
                //System.out.println("action [103] { return token=ENDINPUT; }");
                return token=ENDINPUT;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      //System.out.println("Usage : java Scanner <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          scanner = new Scanner( new java.io.FileReader(argv[i]) );
          do {
            //System.out.println(scanner.yylex());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          //System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          //System.out.println("IO error scanning file \""+argv[i]+"\"");
          //System.out.println(e);
        }
        catch (Exception e) {
          //System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
